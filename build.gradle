buildscript {
	ext {
		kotlinVersion = '1.2.0'
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		maven { url 'http://repo.spring.io/plugins-release' }
		maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")
		classpath('io.spring.gradle:propdeps-plugin:0.0.9.RELEASE')
		classpath "nu.studer:gradle-jooq-plugin:2.0.7"
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'nu.studer.jooq'

configure(allprojects) {
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-idea'
}

group = 'com.menuxx'
version = '0.0.1'

sourceCompatibility = 1.8

noArg {
	annotation("com.menuxx.ocapiserver.NoArg")
}

allOpen {
	annotation("com.menuxx.ocapiserver.AllOpen")
}

repositories {
	mavenCentral()
}

configurations {
	mybatisGenerator
}

def getDbProperties = {
	def properties = new Properties()
	file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
		properties.load(inputStream)
	}
	properties
}

task mybatisGenerate << {
	def properties = getDbProperties()
	ant.properties['targetProject'] = projectDir.path
	ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
	ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
	ant.properties['userId'] = properties.getProperty("jdbc.username")
	ant.properties['password'] = properties.getProperty("jdbc.password")
	ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
	ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
	ant.properties['modelPackage'] = properties.getProperty("package.model")
	ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
	ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
	ant.taskdef(
			name: 'mbgenerator',
			classname: 'org.mybatis.generator.ant.GeneratorAntTask',
			classpath: configurations.mybatisGenerator.asPath
	)
	ant.mbgenerator(overwrite: true, configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
		propertyset {
			propertyref(name: 'targetProject')
			propertyref(name: 'userId')
			propertyref(name: 'driverClass')
			propertyref(name: 'connectionURL')
			propertyref(name: 'password')
			propertyref(name: 'src_main_java')
			propertyref(name: 'src_main_resources')
			propertyref(name: 'modelPackage')
			propertyref(name: 'mapperPackage')
			propertyref(name: 'sqlMapperPackage')
		}
	}
}

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
	mavenCentral()
}

// compileJava.dependsOn(processResources)

jooq {
	version = '3.9.5'
	edition = 'OSS'
	OneCodeDev(sourceSets.main) {
		jdbc {
			driver = 'com.mysql.cj.jdbc.Driver'
			url = 'jdbc:mysql://rm-uf68lsw07o293t779o.mysql.rds.aliyuncs.com/onecode?useSSL=false&useUnicode=true&characterEncoding=UTF-8'
			user = 'oc'
			password = 'B5q0n6NfDdvYWXD'
		}
		generator {
			database {
				name = 'org.jooq.util.mysql.MySQLDatabase'
				inputSchema = 'onecode'
			}
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = true
				fluentSetters = true
			}
			target {
				packageName = 'com.menuxx.ocapiserver.db'
				// directory = 'src/main/java'
			}
		}
	}
//	OneCodeProd(sourceSets.main) {
//		jdbc {
//			driver = 'com.mysql.cj.jdbc.Driver'
//			url = 'jdbc:mysql://rm-uf68lsw07o293t779o.mysql.rds.aliyuncs.com/onecode?useSSL=false&useUnicode=true&characterEncoding=UTF-8'
//			user = 'oc'
//			password = 'B5q0n6NfDdvYWXD'
//		}
//		generator {
//			database {
//				name = 'org.jooq.util.mysql.MySQLDatabase'
//				inputSchema = 'onecode'
//			}
//			generate {
//				relations = true
//				deprecated = false
//				records = true
//				immutablePojos = true
//				fluentSetters = true
//			}
//			target {
//				packageName = 'com.menuxx.ocapiserver.db'
//				// directory = 'src/main/java'
//			}
//		}
//	}
}

project.tasks.getByName('compileJava').dependsOn -= 'generateOnecodeProdJooqSchemaSource'
// project.tasks.getByName('compileJava').dependsOn -= 'generateMenuxxDevJooqSchemaSource'

dependencies {

	optional "org.springframework.boot:spring-boot-configuration-processor"

	compile 'com.qiniu:qiniu-java-sdk:7.2.+'

	compile 'com.lmax:disruptor:3.3.7'

	compile project(":ronglian")

	// jooq 文档
	// https://www.jooq.org/doc/3.0/manual/sql-execution/fetching/pojos/#N15577
	compile 'org.jooq:jooq:3.9.5'
	compile 'org.jooq:jooq-meta:3.9.5'

	compile "org.slf4j:slf4j-api:1.7.25"

	compile "com.zaxxer:HikariCP:2.6.3"

	compile("org.springframework.boot:spring-boot-starter-jdbc") {
		exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
	}

	compile "mysql:mysql-connector-java:6.0.3"
	jooqRuntime 'mysql:mysql-connector-java:6.0.3'

	mybatisGenerator 'mysql:mysql-connector-java:6.0.3'
	mybatisGenerator "org.mybatis.generator:mybatis-generator-core:1.3.5"

	// https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
	// https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'

	// compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	runtime('org.springframework.boot:spring-boot-devtools')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}
