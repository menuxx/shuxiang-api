/*
 * This file is generated by jOOQ.
*/
package com.menuxx.common.db.tables;


import com.menuxx.common.db.Keys;
import com.menuxx.common.db.Onecode;
import com.menuxx.common.db.tables.records.TOrderRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrder extends TableImpl<TOrderRecord> {

    private static final long serialVersionUID = 1799274127;

    /**
     * The reference instance of <code>onecode.t_order</code>
     */
    public static final TOrder T_ORDER = new TOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderRecord> getRecordType() {
        return TOrderRecord.class;
    }

    /**
     * The column <code>onecode.t_order.id</code>.
     */
    public final TableField<TOrderRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>onecode.t_order.merchant_id</code>.
     */
    public final TableField<TOrderRecord, UInteger> MERCHANT_ID = createField("merchant_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>onecode.t_order.channel_id</code>.
     */
    public final TableField<TOrderRecord, UInteger> CHANNEL_ID = createField("channel_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>onecode.t_order.user_id</code>. 订单用户id
     */
    public final TableField<TOrderRecord, UInteger> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "订单用户id");

    /**
     * The column <code>onecode.t_order.order_no</code>. 订单号
     */
    public final TableField<TOrderRecord, String> ORDER_NO = createField("order_no", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "订单号");

    /**
     * The column <code>onecode.t_order.express_no</code>. 运单号
     */
    public final TableField<TOrderRecord, String> EXPRESS_NO = createField("express_no", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "运单号");

    /**
     * The column <code>onecode.t_order.express_type</code>. 1: 顺丰 2: EMS
     */
    public final TableField<TOrderRecord, Integer> EXPRESS_TYPE = createField("express_type", org.jooq.impl.SQLDataType.INTEGER, this, "1: 顺丰 2: EMS");

    /**
     * The column <code>onecode.t_order.item_name</code>.
     */
    public final TableField<TOrderRecord, String> ITEM_NAME = createField("item_name", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>onecode.t_order.pay_amount</code>. 支付价格
     */
    public final TableField<TOrderRecord, Integer> PAY_AMOUNT = createField("pay_amount", org.jooq.impl.SQLDataType.INTEGER, this, "支付价格");

    /**
     * The column <code>onecode.t_order.count</code>. 购买商品的数量
     */
    public final TableField<TOrderRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "购买商品的数量");

    /**
     * The column <code>onecode.t_order.paid</code>. 是否支付
     */
    public final TableField<TOrderRecord, Integer> PAID = createField("paid", org.jooq.impl.SQLDataType.INTEGER, this, "是否支付");

    /**
     * The column <code>onecode.t_order.status</code>. 1 已创建，未发货 2 购买成功 3 已发货 4 已签收
     */
    public final TableField<TOrderRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER, this, "1 已创建，未发货 2 购买成功 3 已发货 4 已签收");

    /**
     * The column <code>onecode.t_order.create_at</code>.
     */
    public final TableField<TOrderRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>onecode.t_order.update_at</code>.
     */
    public final TableField<TOrderRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>onecode.t_order</code> table reference
     */
    public TOrder() {
        this("t_order", null);
    }

    /**
     * Create an aliased <code>onecode.t_order</code> table reference
     */
    public TOrder(String alias) {
        this(alias, T_ORDER);
    }

    private TOrder(String alias, Table<TOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrder(String alias, Table<TOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Onecode.ONECODE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_T_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderRecord>>asList(Keys.KEY_T_ORDER_PRIMARY, Keys.KEY_T_ORDER_ORDER_NO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrder as(String alias) {
        return new TOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrder rename(String name) {
        return new TOrder(name, null);
    }
}
